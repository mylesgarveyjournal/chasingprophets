const oldObj = {
    staticPlot: false,
    typesetMath: true,
    plotlyServerURL: '',
    editable: false,
    edits: {
        annotationPosition: false,
        annotationTail: false,
        annotationText: false,
        axisTitleText: false,
        colorbarPosition: false,
        colorbarTitleText: false,
        legendPosition: false,
        legendText: false,
        shapePosition: false,
        titleText: false
    },
    editSelection: true,
    autosizable: false,
    responsive: false,
    fillFrame: false,
    frameMargins: 0,
    scrollZoom: 'gl3d+geo+map',
    doubleClick: 'reset+autosize',
    doubleClickDelay: 300,
    showAxisDragHandles: true,
    showAxisRangeEntryBoxes: true,
    showTips: true,
    showLink: false,
    linkText: 'Edit chart',
    sendData: true,
    showSources: false,
    displayModeBar: 'hover',
    showSendToCloud: false,
    showEditInChartStudio: false,
    modeBarButtonsToRemove: [],
    modeBarButtonsToAdd: [],
    modeBarButtons: [[]],
    toImageButtonOptions: {},
    displaylogo: true,
    watermark: false,
    plotGlPixelRatio: 2,
    topojsonURL: '../../topojson/dist',
    mapboxAccessToken: 'pk.eyJ1IjoicGxvdGx5LWRvY3MiLCJhIjoiY2xpMGYyNWgxMGJhdzNzbXhtNGI0Nnk0aSJ9.0oBvi_UUZ0O1N0xk0yfRwg',
    logging: 2,
    notifyOnLogging: 0,
    queueLength: 0,
    locale: 'en-US',
    locales: {},
    _baseUrl: '',
    _hasZeroHeight: true,
    _hasZeroWidth: false,
    _scrollZoom: { gl3d: 1, geo: 1, map: 1 }
};

const newObj = {
    staticPlot: false,
    typesetMath: true,
    plotlyServerURL: '',
    editable: false,
    edits: {
        annotationPosition: false,
        annotationTail: false,
        annotationText: false,
        axisTitleText: false,
        colorbarPosition: false,
        colorbarTitleText: false,
        legendPosition: false,
        legendText: false,
        shapePosition: false,
        titleText: false
    },
    editSelection: true,
    autosizable: false,
    responsive: false,
    fillFrame: false,
    frameMargins: 0,
    scrollZoom: 'gl3d+geo+map',
    doubleClick: 'reset+autosize',
    doubleClickDelay: 300,
    showAxisDragHandles: true,
    showAxisRangeEntryBoxes: true,
    showTips: true,
    showLink: false,
    linkText: 'Edit chart',
    sendData: true,
    showSources: false,
    displayModeBar: 'hover',
    showSendToCloud: false,
    showEditInChartStudio: false,
    modeBarButtonsToRemove: [],
    modeBarButtonsToAdd: [],
    modeBarButtons: [[]],
    toImageButtonOptions: {},
    displaylogo: true,
    watermark: false,
    plotGlPixelRatio: 2,
    topojsonURL: '../../topojson/dist',
    mapboxAccessToken: 'pk.eyJ1IjoicGxvdGx5LWRvY3MiLCJhIjoiY2xpMGYyNWgxMGJhdzNzbXhtNGI0Nnk0aSJ9.0oBvi_UUZ0O1N0xk0yfRwg',
    logging: 2,
    notifyOnLogging: 0,
    queueLength: 0,
    locale: 'en-US',
    locales: {},
    _baseUrl: '',
    _hasZeroHeight: false,
    _hasZeroWidth: false,
    _scrollZoom: { gl3d: 1, geo: 1, map: 1 }
};

function isPlainObject(obj) {
    // if (window && window.process && window.process.versions) {
    //     return Object.prototype.toString.call(obj) === '[object Object]';
    // }
    return (
        Object.prototype.toString.call(obj) === '[object Object]' &&
        Object.getPrototypeOf(obj).hasOwnProperty('hasOwnProperty')
    );
}

const hasCollectionChanged = (oldCollection, newCollection) => {
    const isArrayOrObject = (...vals) => vals.every((v) => isPlainObject(v)) || vals.every((v) => Array.isArray(v));
    if ([oldCollection, newCollection].every((a) => Array.isArray(a))) {
        if (oldCollection.length !== newCollection.length) return true;

        for (let i = 0; i < oldCollection.length; i++) {
            const oldVal = oldCollection[i];
            const newVal = newCollection[i];
            if (oldVal !== newVal) {
                const hasChanged = isArrayOrObject(oldVal, newVal) ? hasCollectionChanged(oldVal, newVal) : true;
                if (hasChanged) return true;
            }
        }
    } else {
        if (Object.keys(oldCollection).length !== Object.keys(newCollection).length) return true;

        for (const k in oldCollection) {
            if (k.startsWith('_')) continue;
            const oldVal = oldCollection[k];
            const newVal = newCollection[k];
            if (oldVal !== newVal) {
                const hasChanged = isArrayOrObject(oldVal, newVal) ? hasCollectionChanged(oldVal, newVal) : true;
                if (hasChanged) return true;
            }
        }
    }

    return false;
};

const diffConfig = (oldConfig, newConfig) => {
    var key;
    for (key in oldConfig) {
        if (key.charAt(0) === '_') continue;
        var oldVal = oldConfig[key];
        var newVal = newConfig[key];
        if (oldVal !== newVal) {
            if (isPlainObject(oldVal) && isPlainObject(newVal)) {
                if (diffConfig(oldVal, newVal)) {
                    return true;
                }
            } else if (Array.isArray(oldVal) && Array.isArray(newVal)) {
                if (oldVal.length !== newVal.length) {
                    return true;
                }
                for (var i = 0; i < oldVal.length; i++) {
                    if (oldVal[i] !== newVal[i]) {
                        if (isPlainObject(oldVal[i]) && isPlainObject(newVal[i])) {
                            if (diffConfig(oldVal[i], newVal[i])) {
                                return true;
                            }
                        } else {
                            return true;
                        }
                    }
                }
            } else {
                return true;
            }
        }
    }
};

const limit = 10000;

console.time('diffConfig');
for (let i = 0; i < limit; i++) {
    diffConfig(oldObj, newObj);
}
console.timeEnd('diffConfig');

console.time('hasCollectionChanged');
for (let i = 0; i < limit; i++) {
    hasCollectionChanged(oldObj, newObj);
}
console.timeEnd('hasCollectionChanged');
